// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: xlsx_service.proto

package dgraph_imei

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	XlsxService_GetXlsxData_FullMethodName = "/xlsxservice.XlsxService/GetXlsxData"
)

// XlsxServiceClient is the client API for XlsxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XlsxServiceClient interface {
	// Requests the XLSX data for a given file path and receives it in chunks.
	GetXlsxData(ctx context.Context, in *GetXlsxRequest, opts ...grpc.CallOption) (XlsxService_GetXlsxDataClient, error)
}

type xlsxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXlsxServiceClient(cc grpc.ClientConnInterface) XlsxServiceClient {
	return &xlsxServiceClient{cc}
}

func (c *xlsxServiceClient) GetXlsxData(ctx context.Context, in *GetXlsxRequest, opts ...grpc.CallOption) (XlsxService_GetXlsxDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &XlsxService_ServiceDesc.Streams[0], XlsxService_GetXlsxData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &xlsxServiceGetXlsxDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type XlsxService_GetXlsxDataClient interface {
	Recv() (*XlsxDataChunk, error)
	grpc.ClientStream
}

type xlsxServiceGetXlsxDataClient struct {
	grpc.ClientStream
}

func (x *xlsxServiceGetXlsxDataClient) Recv() (*XlsxDataChunk, error) {
	m := new(XlsxDataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XlsxServiceServer is the server API for XlsxService service.
// All implementations must embed UnimplementedXlsxServiceServer
// for forward compatibility
type XlsxServiceServer interface {
	// Requests the XLSX data for a given file path and receives it in chunks.
	GetXlsxData(*GetXlsxRequest, XlsxService_GetXlsxDataServer) error
	mustEmbedUnimplementedXlsxServiceServer()
}

// UnimplementedXlsxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXlsxServiceServer struct {
}

func (UnimplementedXlsxServiceServer) GetXlsxData(*GetXlsxRequest, XlsxService_GetXlsxDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetXlsxData not implemented")
}
func (UnimplementedXlsxServiceServer) mustEmbedUnimplementedXlsxServiceServer() {}

// UnsafeXlsxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XlsxServiceServer will
// result in compilation errors.
type UnsafeXlsxServiceServer interface {
	mustEmbedUnimplementedXlsxServiceServer()
}

func RegisterXlsxServiceServer(s grpc.ServiceRegistrar, srv XlsxServiceServer) {
	s.RegisterService(&XlsxService_ServiceDesc, srv)
}

func _XlsxService_GetXlsxData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetXlsxRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XlsxServiceServer).GetXlsxData(m, &xlsxServiceGetXlsxDataServer{stream})
}

type XlsxService_GetXlsxDataServer interface {
	Send(*XlsxDataChunk) error
	grpc.ServerStream
}

type xlsxServiceGetXlsxDataServer struct {
	grpc.ServerStream
}

func (x *xlsxServiceGetXlsxDataServer) Send(m *XlsxDataChunk) error {
	return x.ServerStream.SendMsg(m)
}

// XlsxService_ServiceDesc is the grpc.ServiceDesc for XlsxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XlsxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xlsxservice.XlsxService",
	HandlerType: (*XlsxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetXlsxData",
			Handler:       _XlsxService_GetXlsxData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xlsx_service.proto",
}
